You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Solution:

class Solution {
public:
    int maxProfit(vector<int>& p) {
     int tprofit=INT_MIN,minele=INT_MAX;
        for(int i=0;i<p.size();i++)
        {
            minele=min(minele, p[i]);
            tprofit=max(tprofit,p[i]-minele);
        }
        return tprofit;
    }
};


another solution:

class Solution {
public:
    int maxProfit(vector<int>& p) {
     int lsf=INT_MAX;
     int maxp=0;
     int currp=0;
     for(int i=0; i<p.size(); i++)
     {
         if(p[i]<lsf)
             lsf=p[i];
         currp=p[i]-lsf;
         if(currp>maxp)
            maxp=currp;
     }
        return maxp;

    }
};


Kadane's Algorithm (max subarray):

class Solution {
public:
    int maxProfit(vector<int>& p) {
     int currmax=0,maxsofar=0;
        for(int i=1;i<p.size();i++)
        {
            currmax=max(0, currmax+=p[i]-p[i-1]);
            maxsofar=max(currmax,maxsofar);
        }
        return maxsofar;
    }
};
