Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.
Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'

Solution:

Approach 1:

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int lenA=0,lenB=0;
        ListNode *h1=headA;
       
        while(h1!=NULL)
        {
            lenA++;
            h1=h1->next;
        }
        ListNode *h2=headB;
        while(h2!=NULL)
        {
            lenB++;
            h2=h2->next;
        }
        int i=abs(lenA-lenB);
         h1=headA;
         h2=headB;
        if(lenA>lenB)
        {
            while(i-->0)
            {
                h1=h1->next;
            }
        }
        else
        {
            while(i-->0)
            {
                h2=h2->next;
            }
        }
        while(h1!=h2)
        {
           
            h1=h1->next;
            h2=h2->next;
             if(h1==NULL or h2==NULL)
                return nullptr;
        }
        return h1;
    }
};

Approach 2:

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *h1=headA;
        ListNode *h2=headB;
        while(h1!=h2)
        {
            h1=h1!=NULL ? h1->next : headB;
            h2=h2!=NULL ? h2->next : headA;
        }
        return h1;
    }
};
