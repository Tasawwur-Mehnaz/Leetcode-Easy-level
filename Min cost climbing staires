You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.
You can either start from the step with index 0, or the step with index 1.
Return the minimum cost to reach the top of the floor.

Example 1:
Input: cost = [10,15,20]
Output: 15
Explanation: You will start at index 1.
- Pay 15 and climb two steps to reach the top.
The total cost is 15.

Example 2:
Input: cost = [1,100,1,1,1,100,1,1,100,1]
Output: 6

Solution:

Recursion: (TLE)

int process(int n,vector<int>& cost)
    {
        if(n>=cost.size())
            return 0;
        int t1=process(n+1,cost);
        int t2=process(n+2,cost);
    
        return min(t1,t2)+cost[n];
    }
    int minCostClimbingStairs(vector<int>& cost) {
        
        int a1=process(0,cost);
        int a2=process(1,cost);
        return min(a1,a2);
        
    }
    
    
  Memoization (accepted)  TC,SC-O(n)
  
  int dp[1001];
    int process(int i,vector<int>& cost)
    {
        if(i>=cost.size())
            return 0;
        if(dp[i]!=-1)
           return dp[i];
        int t1=process(i+1,cost);
        int t2=process(i+2,cost);
    
        return dp[i]=min(t1,t2)+cost[i];
    }
    int minCostClimbingStairs(vector<int>& cost) {
     
        memset(dp,-1,sizeof dp);
        return min(process(0,cost),process(1,cost));
        
    }
    
    
    Top down approach
    
    class Solution {
public:
    
     int minCostClimbingStairs(vector<int>& cost) 
     {
         int n=cost.size();
         vector<int> dp(n+2);
         dp[n]=0,dp[n+1]=0;
         for(int i=n-1;i>=0;i--)
         {
             dp[i]=cost[i]+min(dp[i+1],dp[i+2]);
         }
     
        return min(dp[0],dp[1]);
        
    }
};
    
    
Top down approach with space optimized TC- O(N) SC-O(1)

 int minCostClimbingStairs(vector<int>& cost) 
     {
        int n=cost.size();
        int d1=0,d2=0;
         for(int i=n-1;i>=0;i--)
         {
             int d=cost[i]+min(d1,d2);
             d2=d1;
             d1=d; 
         }
        return min(d1,d2);
        
    }
