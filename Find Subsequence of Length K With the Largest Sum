You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum.
Return any such subsequence as an integer array of length k.
A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

Example 1:
Input: nums = [2,1,3,3], k = 2
Output: [3,3]
Explanation:
The subsequence has the largest sum of 3 + 3 = 6.


Practice this if you want to improve concept in priority_queue

Solution:

Using Min heap:

typedef pair<int,int> pi;

class Solution {
public:
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        vector<int> ans;
        priority_queue<pi, vector<pi>, greater<pi>> pq;
        for(int i=0;i<nums.size();i++)
        {
            pq.push({nums[i],i});
            if(pq.size()>k)
            {
                pq.pop();
            }
        }
        priority_queue<pi, vector<pi>, greater<pi>> pq2;
        while(!pq.empty())
        {
            pq2.push({pq.top().second,pq.top().first});
            pq.pop();
        }
        while(!pq2.empty())
        {
            ans.push_back(pq2.top().second);
            pq2.pop();
        }
   
        return ans;
    }
};


Using max heap:

class Solution {
public:
    static bool compare(pair<int,int> &a, pair<int,int> &b)
    {
        return a.second < b.second;
    }
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        vector<int> ans;
        int n=nums.size();
        if(k==n)
            return nums;
        priority_queue<pair<int,int>> pq;
        for(int i=0;i<n;i++)
        {
            pq.push({nums[i],i});
        }
        vector<pair<int,int>> pq2;
     
        while(k--)
        {
            pq2.push_back(pq.top());
            pq.pop();
        }
        sort(pq2.begin(),pq2.end(),compare);
        for(int i=0;i<pq2.size();i++)
        {
            ans.push_back(pq2[i].first);
        }
        return ans;
    }
    
};
