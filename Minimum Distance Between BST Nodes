Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree. 

Example 1:
Input: root = [4,2,6,1,3]
Output: 1


Solution:

class Solution {
public:
    int mini=INT_MAX;
    void inorder(TreeNode* root, int &prev)
    {
        if(root==NULL) 
           return;
          
        inorder(root->left,prev);
        if(prev!=-1)
        {
            mini=min(mini,abs(root->val-prev));
        }
        prev=root->val;
        inorder(root->right,prev);

    }
    int minDiffInBST(TreeNode* root) {
        int prev=-1;
        inorder(root,prev);
        return mini;
    }
};

OR

Vector method:

class Solution {
public:
    void inorder(TreeNode* root, vector<int> &v)
    {
        if(root==NULL)
           return;
        inorder(root->left,v);
        v.push_back(root->val);
        inorder(root->right,v);
    }
    int minDiffInBST(TreeNode* root) {
        vector<int> v;
        int ans=INT_MAX;
        inorder(root,v);
        int n=v.size();
        for(int i=0;i<n-1;i++)
        {
            ans=min(ans,abs(v[i]-v[i+1]));
        }
        return ans;
    }
};
