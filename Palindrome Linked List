Given the head of a singly linked list, return true if it is a palindrome.

Example 1:
Input: head = [1,2,2,1]
Output: true

Solution:

TC-O(N), SC-O(N)
Make array of values of node and then check whether it is palindrome or not.

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        vector<int> v;
        ListNode* t=head;
        while(t!=NULL)
        {
            v.push_back(t->val);
            t=t->next;
        }
        vector<int> v1=v;
        reverse(v.begin(),v.end());
        return v==v1;
    }
};


TC-O(N), SC-O(1)
Find the middle of list and then reverse the second half of list and compare with first half and finally return the second half as it is (good practice).


class Solution {
public:
    ListNode* middleoflist(ListNode* head)
    {
        ListNode* fast=head;
        ListNode* slow=head;
        while(fast->next!=NULL && fast->next->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
    
    ListNode* reverselist(ListNode* node)
    {
        ListNode* prev=NULL;
        ListNode* curr=node;
        while(curr!=NULL)
        {
            ListNode* temp=curr->next;
            curr->next=prev;
            prev=curr;
            curr=temp;
        }
        return prev;
    }
    
    bool isPalindrome(ListNode* head) {
        if(head==NULL)
            return true;
        ListNode* endoffirsthalf=middleoflist(head);
        ListNode* startofsecondhalf=reverselist(endoffirsthalf->next);
        
        ListNode* a=head;
        ListNode* b=startofsecondhalf;
        bool ans=true;
        while(ans && b!=NULL)
        {
            if(a->val!=b->val)
                ans=false;
            a=a->next;
            b=b->next;
        }
        endoffirsthalf->next=reverselist(startofsecondhalf);
        return ans;
    }
};
