Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
A subarray is a contiguous part of an array.

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Solution:

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int sum=0,max=nums[0];
        
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
            if(sum>max)
                max=sum;
            if(sum<0)
                sum=0;
        }
        return max;
    }
};

or

int maxSubArray(vector<int>& nums) {
        int sum = nums[0];
        int result = sum;
        for (int i = 1; i < nums.size(); ++i) {
            if (sum > 0)
                sum += nums[i];
            else
                sum = nums[i];
            result = max(result, sum);
        }
        return result;
    }
