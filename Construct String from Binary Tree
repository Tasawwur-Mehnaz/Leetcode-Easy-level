Given the root of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it.
Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.

Example 1:
Input: root = [1,2,3,4]
Output: "1(2(4))(3)"
Explanation: Originally, it needs to be "1(2(4)())(3()())", but you need to omit all the unnecessary empty parenthesis pairs. And it will be "1(2(4))(3)"

Example 2:
Input: root = [1,2,3,null,4]
Output: "1(2()(4))(3)"
Explanation: Almost the same as the first example, except we cannot omit the first parenthesis pair to break 
the one-to-one mapping relationship between the input and the output.


Solution:

class Solution {
public:
 
    string tree2str(TreeNode* root) {
        string ans;
        if(root==NULL)
            return "";
        
        ans=to_string(root->val);
        
        if(root->left)
            ans+='(' + tree2str(root->left)+')';
        
        else if(root->right)
            ans+="()";
    
        if(root->right)
            ans+='(' + tree2str(root->right)+')';
        
        return ans;
    }
};

OR

class Solution {
public:
    void preorder(TreeNode* root,string& ans)
    {
        if(root==NULL)
            return;
        
        ans+=to_string(root->val);
        if(root->left)
        {
            ans+="(";
            preorder(root->left,ans);
            ans+=")";
        }
        if(root->right)
        {
            if(root->left==NULL)
            {
                ans+="()";
            }
            ans+="(";
            preorder(root->right,ans);
            ans+=")";
            
        }
        return;
    }
    string tree2str(TreeNode* root) {
        string ans="";
        preorder(root,ans);
        return ans;
    }
};
